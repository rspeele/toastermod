// Set the font.
// Fonts are loaded at startup in data/font.cfg, but if you edit that it'll get replaced by updates.
// A better approach if you want to use custom font is to load it as part of your init.cfg.

hudfont wheaton

// Draw the clock.

// Set location.
hudpos $clock_x $clock_y
// Set size.
hudsize $clock_w $clock_h
// Set text height, this is independent of hudsize. Think of it like a font size but in hud coordinates.
hudtextheight $clock_h
// Set alignment, this means that text/rectangles/images/whatever will be drawn
// with its top center at the specified hudpos. Really only the first letters matter, you
// could use "hudalign t c" with the same effect.
hudalign top center
// Set color, 2nd argument is alpha 0-255.
hudcolor 0x202020 100
// Draw a rectangle.
hudrectangle
// Set color to white; leaving 2nd argument unspecified defaults to 255 (opaque).
hudcolor 0xffffff
// Draw the text.
// (clocksecs) gets the time to display in seconds, counting up or down according to the value of variable $clockup.
// (clock ...) formats it as mm:ss.
hudtext (clock (clocksecs))

// Broadcast message
hudalign center center
hudpos $bcast_x $bcast_y
hudtextheight $bcast_h
hudcolor 0xffffff
hudtext (hud:broadcast)

// Draw the speed, but only if $showspeed is enabled.

if $showspeed [
   hudalign bottom center
   hudtextheight @speed_h // The @ prefix is like $, but substitutes inside []
   hudpos @speed_x @speed_y
   // Draw a black rectangle for the bar background
   hudcolor 0x000000 100
   hudsize @speed_w @speed_h
   hudrectangle
   // Draw a white bar over that representing the current speed
   hudcolor 0xffffff 100
   // If speed goes over 500, will extend past the black bar...
   hudsize (*f @speed_w (divf (hud:speed) 500)) @speed_h
   hudrectangle
   hudcolor 0xffffff
   hudtext (hud:speed)
]

// Health and ammo statuses are both drawn with bottom left alignment.
hudalign bottom left

// Health.
hudpos $health_x $health_y
hudtextheight $health_h
hudcolor 0xffffff
hudtext (hud:health)

// Armour.
hudpos $armour_x $armour_y
hudtextheight $armour_h
if (hud:armour) [
    hudcolor (at $armourcolors (hud:armourtype))
] [
    hudcolor 0xffffff
]
hudtext (hud:armour)

// Survivable.
movetocenter $survivable_x $survivable_y $survivable_w $survivable_h
hudalign center center
hudtextheight $survivable_h
hudcolor (? (< (hud:survivable) 50) 0xff0000 0xffffff)
hudtext (hud:survivable)

currentgun = (hud:gun)

// Ammo.
if $currentgun [ // Don't draw ammo for chainsaw (gun 0)
    movetocenter $ammo_x $ammo_y $ammo_w $ammo_h
    hudalign center center
    hudtextheight $ammo_h
    hudcolor (at $guncolors $currentgun)
    currentammo = (hud:ammo $currentgun)
    if (hud:capacity $currentgun) [
        hudtext (concatword (hud:magazine $currentgun) [\] $currentammo)
    ] [
        hudtext $currentammo
    ]
]

// Ammo list.
loop i 6 [
    hudalign bottom left
    hudpos (+ $ammolist_x (* $i $ammobar_w)) $ammolist_y
    hudsize $ammobar_w $ammolist_h
    currentgun = (+ $i 1)
    currentammo = (+ (hud:ammo $currentgun) (hud:magazine $currentgun)) // reserve + magazine
    currentmax = (+ (hud:maxammo $currentgun) (hud:capacity $currentgun))
    hudcolor (at $guncolors $currentgun) 50
    hudrectangle
    hudsize $ammobar_w (*f $ammolist_h (divf $currentammo $currentmax))
    hudalpha 0xff // set full opacity without changing color
    hudrectangle
]

// Pressed keys.
if $showkeys [
    hudalign center center
    hudtextheight @keysize

    // Forward.
    hudpos @fkey_x @fkey_y
    if (< 0 (hud:move)) keydown keyup
    hudtext @fkey

    // Backward.
    hudpos @bkey_x @bkey_y
    if (> 0 (hud:move)) keydown keyup
    hudtext @bkey

    // Jump.
    hudpos @jkey_x @jkey_y
    if (hud:jumping) keydown keyup
    hudtext @jkey

    // Left strafe.
    hudpos @lkey_x @lkey_y
    if (< 0 (hud:strafe)) keydown keyup
    hudtext @lkey

    // Right strafe.
    hudpos @rkey_x @rkey_y
    if (> 0 (hud:strafe)) keydown keyup
    hudtext @rkey
]
