// This script gets executed when the HUD is loaded, so it's best
// to define things that won't change during gameplay here.

// None of has a direct effect on the in-game HUD system,
// it's just defining some variables that the hud.cfg refers to.
// So if you want to write your own HUD, you don't *need* an init.cfg,
// you just might find it useful to have one.

// Load the font we'll be using for this HUD.
exec packages/fonts/wheaton.cfg

// Colors to draw each gun with.
//            chainsaw shotgun  chaingun rocket   rifle    grenade  pistol
guncolors = [ 0xffff00 0xff0000 0x00ff00 0xff7f00 0x0000ff 0x00ffff 0xaaaaaa ]

// Colors to draw armour with.
//               blue     green    yellow
armourcolors = [ 0x0000ff 0x00ff00 0xffff00 ]

// Next up are definitions of positions and sizes.
// Before getting to those, a word about the HUD coordinate system.
// It works like so:

//      (L,-1000)  (-1000,-1000)                              (1000,-1000)      (R,-1000)
//        +--------------+-----------------------------------------+--------------+
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                   (0,0)                 .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        |              .                                         .              |
//        +--------------+-----------------------------------------+--------------+
//      (L,1000)   (-1000,1000)                               (1000,1000)       (R,1000)

// As you can see all coordinates are proportional to the vertical resolution of the screen.
// You could make a passable HUD by just using coordinates in the square (-1000,-1000) to (1000,1000)
// demarcated by dots in the diagram above. But most likely you'll want to use the extra area afforded
// by wide aspect ratios - the total rectangle (L,-1000) to (R,1000) shown in the diagram. To do that
// in a way that'll work on monitors of different dimensions, you need to know the aspect ratio of the screen.

// You can get it with the function hud:aspect.
// For example, you could get R, the x coordinate corresponding to the right edge of the screen, with:

// (*f (hud:aspect) 1000)

// For convenience, the functions hud:left and hud:right are also provided.
// (hud:left) gives you the value of L. (hud:left $x) is a shorter way of writing (+ $x (hud:left)).
// (hud:right) gives you the value of R. (hud:right $x) is a shorter way of writing (- (hud:right) $x).

// That about covers it, now back to the script...

// Position and size of the clock.

// One nice thing about defining position and size information in
// init.cfg is that hud.cfg will only refer to it, not override it.
// So you can experiment with moving things around in-game by
// typing e.g. /clock_h = 200 in console.
clock_x = 0
clock_y = -1000
clock_h = 100
clock_w = 300

// Position and size of the broadcast message.
// This is the text that's displayed prominently on important events like a round won in elimination.
// No width is specified since you don't really know how long the broadcast string will be.
bcast_x = 0
bcast_y = -400
bcast_h = 100

// Position and size of the speedometer.
speed_x = 0
speed_y = 1000
speed_h = 60
speed_w = 800

// For my HUD, I want to show the player's potential survivable damage in a big number,
// then below that have his actual health and armour values a bit smaller.

// +---------------------------------------+
// |                                       |
// |                                       |
// |      potential survivable damage      |
// |                                       |
// |                                       |
// |                                       |
// +-------------------+-------------------+
// |                   |                   |
// |  health           |   armour          |
// |                   |                   |
// |                   |                   |
// +-------------------+-------------------+

// That's three separate numbers, but it should be easy to adjust the overall size and position
// of the whole thing as one chunk, so I'm going to define them relative to one another.

// For lack of a better word, I'm calling this the health status area. Here are its overall dimensions.

healthstatus_x = (hud:left)
healthstatus_y = 1000
healthstatus_w = 300
healthstatus_h = 200

// And here's how the dimensions of its sub-components are defined as portions of it.

// Healt_h is at bottom left, a bit shorter and half as wide as the overall healthstatus.
health_x = $healthstatus_x
health_y = $healthstatus_y
health_w = (div $healthstatus_w 2)
health_h = 80

// Armour is the same size as health but shifted over to the right by $health_w.
armour_x = (+ $health_x $health_w)
armour_y = $health_y
armour_w = $health_w
armour_h = $health_h

// Survivable is above them with the full width.
survivable_x = $healthstatus_x
survivable_y = (- $healthstatus_y $health_h)
survivable_w = $healthstatus_w
survivable_h = (- $healthstatus_h $health_h)

// I want a similar setup for ammo - showing the ammo for the current weapon as a big number,
// with bars indicating current ammo levels for all weapons below that.

//  +-----------------------+
//  |                       |
//  |     ammo count        |
//  |   for currently       |
//  |  selected weapon      |
//  |                       |
//  +---+---+---+---+---+---+
//  |   +---+   |   |   |   |
//  |   |   |   |   +---+   |
//  |   |   |   +---+   |   |
//  +---+---+---+---+---+---+

// Additionally, I'm positioning and sizing the overall ammo status relative to the overall health status.

ammostatus_x = (+ $healthstatus_x $healthstatus_w)
ammostatus_y = $healthstatus_y
ammostatus_w = $healthstatus_w
ammostatus_h = $healthstatus_h

// Dimensions for area that will contain bars.

ammolist_x = $ammostatus_x
ammolist_y = $ammostatus_y
ammolist_h = $health_h // Ammo list will be the same height as the health/armour part of healthstatus.
ammolist_w = $ammostatus_w

// Dimensions for individual bars, which get drawn in a loop in hud.cfg.
ammobar_w = (div $ammolist_w 6) // 6 guns have ammo to display

// Dimensions for currently selected weapon ammo.

ammo_x = $ammostatus_x
ammo_y = (- $ammostatus_y $ammolist_h)
ammo_w = $ammostatus_w
ammo_h = (- $ammostatus_h $ammolist_h)

// When showkeys is on, I want to show what keys are bound to the movement taking place.
// This is a linear search so it should definitely not be in hud.cfg.

// Another approach would be to make images for forward, backward, left, right, and jump and display those
// with the hudimage function e.g. hudimage "data/forward.png".

fkey = (at (searchbinds forward) 0)
bkey = (at (searchbinds backward) 0)
lkey = (at (searchbinds left) 0)
rkey = (at (searchbinds right) 0)
jkey = (at (searchbinds jump) 0)

// Positions of keys for showkeys - starts from the forward key, then everything else is defined relative to that.

keysize = 80 // Text height for a key.

// Forward key.
fkey_x = 0
fkey_y = 700

// Back key.
bkey_x = $fkey_x
bkey_y = (+ $fkey_y $keysize)

// Estimate the width of the back key string to know how far to move the left and right strafe keys away.
bkey_w = (* $keysize (strlen $bkey)) // assume letters are similar in width to height, would really depend on font.

// Left strafe key.
lkey_x = (- $bkey_x $bkey_w)
lkey_y = $bkey_y

// Right strafe key.
rkey_x = (+ $bkey_x $bkey_w)
rkey_y = $lkey_y

// Jump key.
jkey_x = $bkey_x
jkey_y = (+ $bkey_y $keysize)

// Aliases that get run to set the color of a key based on whether it's pressed or not.
keydown = [ hudcolor 0x4fff4f ]
keyjumped = [ hudcolor 0xff4f4f ]
keyup = [ hudcolor 0xffffff 0x50 ]

// Alias used to move to center of a box given its bottom left coordinates, width, and height.
// Right now this is used because all the health and ammo status stuff has coordinates defined with
// bottom left alignment assumed, but the big text should be drawn centered.
// Usage:
// movetocenter $x $y $width $height
movetocenter = [
    hudpos (+ $arg1 (div $arg3 2)) (- $arg2 (div $arg4 2))
]
